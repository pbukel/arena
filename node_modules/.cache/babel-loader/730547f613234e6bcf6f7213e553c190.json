{"ast":null,"code":"var _jsxFileName = \"/Users/oila/Documents/Mokymai_TypeScript/TS10/TypeScript/12_paskaita_React/REACT/src/pages/GamePage.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport Hash from \"../components/Hash\";\nimport { useRef, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet correctSpell = 0;\nlet wrongSpell = 0;\n\nfunction GamePage(_ref) {\n  _s();\n\n  let {\n    word,\n    setWord\n  } = _ref;\n  const [allGuessed, setAllGuesed] = useState(false);\n  const inLetter = useRef();\n\n  function guessing() {\n    const guessing = {\n      letter: inLetter.current.value\n    };\n    const options = {\n      method: \"POST\",\n      headers: {\n        \"content-type\": \"application/json\"\n      },\n      body: JSON.stringify(guessing)\n    };\n    fetch(\"http://localhost:4000/guessing\", options).then(res => res.json()).then(data => {\n      if (!data.error) {\n        let tarpinis = [...word];\n        tarpinis[data.index] = data.letter;\n        setWord(tarpinis);\n        correctSpell++;\n        if (correctSpell === word.length) return setAllGuesed(true);\n      } else {\n        wrongSpell++;\n      }\n    });\n    inLetter.current.value = \"\";\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-20 m-auto\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"all_hashes\",\n      children: word.map((x, i) => /*#__PURE__*/_jsxDEV(Hash, {\n        leter: x\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        ref: inLetter,\n        type: \"text\",\n        name: \"\",\n        id: \"\",\n        placeholder: \"leter\",\n        maxLength: \"1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), !allGuessed && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: guessing,\n        children: \"GUESS\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 25\n      }, this), allGuessed && /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"START AGAIN\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 24\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"hangman\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n\n_s(GamePage, \"PfUbUPqQaWSRMTL1PX+jCoSGZgE=\");\n\n_c = GamePage;\nexport default GamePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"GamePage\");","map":{"version":3,"names":["React","Hash","useRef","useState","correctSpell","wrongSpell","GamePage","word","setWord","allGuessed","setAllGuesed","inLetter","guessing","letter","current","value","options","method","headers","body","JSON","stringify","fetch","then","res","json","data","error","tarpinis","index","length","map","x","i"],"sources":["/Users/oila/Documents/Mokymai_TypeScript/TS10/TypeScript/12_paskaita_React/REACT/src/pages/GamePage.js"],"sourcesContent":["import React from \"react\";\nimport Hash from \"../components/Hash\";\nimport { useRef, useState } from \"react\";\nlet correctSpell = 0;\nlet wrongSpell = 0;\n\nfunction GamePage({ word, setWord }) {\n  const [allGuessed, setAllGuesed] = useState(false);\n\n  const inLetter = useRef();\n\n  function guessing() {\n    const guessing = {\n      letter: inLetter.current.value,\n    };\n\n    const options = {\n      method: \"POST\",\n      headers: {\n        \"content-type\": \"application/json\",\n      },\n      body: JSON.stringify(guessing),\n    };\n\n    fetch(\"http://localhost:4000/guessing\", options)\n      .then((res) => res.json())\n      .then((data) => {\n        if (!data.error) {\n          let tarpinis = [...word];\n          tarpinis[data.index] = data.letter;\n          setWord(tarpinis);\n          correctSpell++;\n          if (correctSpell === word.length) return setAllGuesed(true);\n        } else {\n          wrongSpell++;\n        }\n      });\n\n    inLetter.current.value = \"\";\n  }\n  return (\n    <div className={\"p-20 m-auto\"}>\n      <div className=\"all_hashes\">\n        {word.map((x, i) => (\n          <Hash leter={x} key={i} />\n        ))}\n      </div>\n      <div>\n        <input\n          ref={inLetter}\n          type=\"text\"\n          name=\"\"\n          id=\"\"\n          placeholder=\"leter\"\n          maxLength=\"1\"\n        />\n\n        {!allGuessed && <button onClick={guessing}>GUESS</button>}\n        {allGuessed && <button>START AGAIN</button>}\n      </div>\n      <div className=\"hangman\"></div>\n    </div>\n  );\n}\n\nexport default GamePage;\n"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,SAASC,MAAT,EAAiBC,QAAjB,QAAiC,OAAjC;;AACA,IAAIC,YAAY,GAAG,CAAnB;AACA,IAAIC,UAAU,GAAG,CAAjB;;AAEA,SAASC,QAAT,OAAqC;EAAA;;EAAA,IAAnB;IAAEC,IAAF;IAAQC;EAAR,CAAmB;EACnC,MAAM,CAACC,UAAD,EAAaC,YAAb,IAA6BP,QAAQ,CAAC,KAAD,CAA3C;EAEA,MAAMQ,QAAQ,GAAGT,MAAM,EAAvB;;EAEA,SAASU,QAAT,GAAoB;IAClB,MAAMA,QAAQ,GAAG;MACfC,MAAM,EAAEF,QAAQ,CAACG,OAAT,CAAiBC;IADV,CAAjB;IAIA,MAAMC,OAAO,GAAG;MACdC,MAAM,EAAE,MADM;MAEdC,OAAO,EAAE;QACP,gBAAgB;MADT,CAFK;MAKdC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeT,QAAf;IALQ,CAAhB;IAQAU,KAAK,CAAC,gCAAD,EAAmCN,OAAnC,CAAL,CACGO,IADH,CACSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADjB,EAEGF,IAFH,CAESG,IAAD,IAAU;MACd,IAAI,CAACA,IAAI,CAACC,KAAV,EAAiB;QACf,IAAIC,QAAQ,GAAG,CAAC,GAAGrB,IAAJ,CAAf;QACAqB,QAAQ,CAACF,IAAI,CAACG,KAAN,CAAR,GAAuBH,IAAI,CAACb,MAA5B;QACAL,OAAO,CAACoB,QAAD,CAAP;QACAxB,YAAY;QACZ,IAAIA,YAAY,KAAKG,IAAI,CAACuB,MAA1B,EAAkC,OAAOpB,YAAY,CAAC,IAAD,CAAnB;MACnC,CAND,MAMO;QACLL,UAAU;MACX;IACF,CAZH;IAcAM,QAAQ,CAACG,OAAT,CAAiBC,KAAjB,GAAyB,EAAzB;EACD;;EACD,oBACE;IAAK,SAAS,EAAE,aAAhB;IAAA,wBACE;MAAK,SAAS,EAAC,YAAf;MAAA,UACGR,IAAI,CAACwB,GAAL,CAAS,CAACC,CAAD,EAAIC,CAAJ,kBACR,QAAC,IAAD;QAAM,KAAK,EAAED;MAAb,GAAqBC,CAArB;QAAA;QAAA;QAAA;MAAA,QADD;IADH;MAAA;MAAA;MAAA;IAAA,QADF,eAME;MAAA,wBACE;QACE,GAAG,EAAEtB,QADP;QAEE,IAAI,EAAC,MAFP;QAGE,IAAI,EAAC,EAHP;QAIE,EAAE,EAAC,EAJL;QAKE,WAAW,EAAC,OALd;QAME,SAAS,EAAC;MANZ;QAAA;QAAA;QAAA;MAAA,QADF,EAUG,CAACF,UAAD,iBAAe;QAAQ,OAAO,EAAEG,QAAjB;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAVlB,EAWGH,UAAU,iBAAI;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAXjB;IAAA;MAAA;MAAA;MAAA;IAAA,QANF,eAmBE;MAAK,SAAS,EAAC;IAAf;MAAA;MAAA;MAAA;IAAA,QAnBF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAuBD;;GAzDQH,Q;;KAAAA,Q;AA2DT,eAAeA,QAAf"},"metadata":{},"sourceType":"module"}