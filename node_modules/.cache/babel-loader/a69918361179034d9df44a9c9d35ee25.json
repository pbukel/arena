{"ast":null,"code":"var _jsxFileName = \"/Users/oila/Documents/Mokymai_TypeScript/TS10/TypeScript/12_paskaita_React/REACT/src/components/ChatModal.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useContext } from \"react\";\nimport mainContext from \"../context/mainContext\";\nimport SingleMessage from \"./SingleMessage\";\nimport { useRef } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { addMsg } from \"../features/users\";\nimport { updateUser } from \"../features/users\";\nimport { userChatUpdate } from \"../features/users\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ChatModal(_ref) {\n  _s();\n\n  let {\n    index,\n    chating_user\n  } = _ref;\n  const dispatch = useDispatch();\n  const allusers = useSelector(state => state.users.value.users);\n  const logedUser = useSelector(state => state.users.value.loggedUser);\n  const inMessage = useRef();\n  const {\n    getMessages,\n    setMessages,\n    modal,\n    setModal\n  } = useContext(mainContext);\n  let objIndex = allusers.findIndex(obj => obj.id === logedUser.id);\n  const updatedUser = {\n    user: logedUser,\n    index: objIndex\n  }; ///adding chat to other user database\n\n  let checkifchatexist = chating_user.chats.find(x => x.id === logedUser.id);\n  const selectedUserIndex = allusers.findIndex(x => x.id === chating_user.id);\n  const selectedUserChatIndex = chating_user.chats.findIndex(x => x.id === logedUser.id);\n\n  function addMessage() {\n    const newmees = {\n      id: logedUser.id,\n      text: inMessage.current.value\n    };\n    const newArr = [...getMessages, newmees]; // add mesage to state, to see updates\n\n    setMessages(newArr);\n    const object = {\n      array: newArr,\n      index: index\n    }; // add messsages to loged user database\n\n    dispatch(addMsg(object)); ///updating CHAT array into  other user\n\n    if (checkifchatexist) {\n      const data = {\n        array: newArr,\n        userIndex: selectedUserIndex,\n        messageIndex: selectedUserChatIndex\n      };\n      dispatch(userChatUpdate(data));\n      console.log(allusers[selectedUserIndex].chats[index].messages);\n      console.log(newArr);\n    }\n  }\n\n  function closeModal(obj) {\n    setModal(false); //save chat to basic database\n\n    dispatch(updateUser(obj));\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"modal\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"insideModal\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => closeModal(updatedUser),\n        children: \"X\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"messages\",\n        children: getMessages.map((x, i) => /*#__PURE__*/_jsxDEV(SingleMessage, {\n          mess: x\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sending\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          ref: inMessage,\n          type: \"text\",\n          placeholder: \"message\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          on: true,\n          onClick: addMessage,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ChatModal, \"Qjce619wVwc3eqrGQamsKSbm71Q=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = ChatModal;\nexport default ChatModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatModal\");","map":{"version":3,"names":["React","useContext","mainContext","SingleMessage","useRef","useSelector","useDispatch","addMsg","updateUser","userChatUpdate","ChatModal","index","chating_user","dispatch","allusers","state","users","value","logedUser","loggedUser","inMessage","getMessages","setMessages","modal","setModal","objIndex","findIndex","obj","id","updatedUser","user","checkifchatexist","chats","find","x","selectedUserIndex","selectedUserChatIndex","addMessage","newmees","text","current","newArr","object","array","data","userIndex","messageIndex","console","log","messages","closeModal","map","i"],"sources":["/Users/oila/Documents/Mokymai_TypeScript/TS10/TypeScript/12_paskaita_React/REACT/src/components/ChatModal.js"],"sourcesContent":["import React from \"react\";\nimport { useContext } from \"react\";\nimport mainContext from \"../context/mainContext\";\nimport SingleMessage from \"./SingleMessage\";\nimport { useRef } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { addMsg } from \"../features/users\";\nimport { updateUser } from \"../features/users\";\nimport { userChatUpdate } from \"../features/users\";\n\nfunction ChatModal({ index, chating_user }) {\n  const dispatch = useDispatch();\n  const allusers = useSelector((state) => state.users.value.users);\n  const logedUser = useSelector((state) => state.users.value.loggedUser);\n  const inMessage = useRef();\n  const { getMessages, setMessages, modal, setModal } = useContext(mainContext);\n  let objIndex = allusers.findIndex((obj) => obj.id === logedUser.id);\n\n  const updatedUser = {\n    user: logedUser,\n    index: objIndex,\n  };\n\n  ///adding chat to other user database\n\n  let checkifchatexist = chating_user.chats.find((x) => x.id === logedUser.id);\n  const selectedUserIndex = allusers.findIndex((x) => x.id === chating_user.id);\n  const selectedUserChatIndex = chating_user.chats.findIndex(\n    (x) => x.id === logedUser.id\n  );\n  function addMessage() {\n    const newmees = {\n      id: logedUser.id,\n      text: inMessage.current.value,\n    };\n    const newArr = [...getMessages, newmees];\n    // add mesage to state, to see updates\n    setMessages(newArr);\n    const object = {\n      array: newArr,\n      index: index,\n    };\n    // add messsages to loged user database\n    dispatch(addMsg(object));\n\n    ///updating CHAT array into  other user\n    if (checkifchatexist) {\n      const data = {\n        array: newArr,\n        userIndex: selectedUserIndex,\n        messageIndex: selectedUserChatIndex,\n      };\n      dispatch(userChatUpdate(data));\n      console.log(allusers[selectedUserIndex].chats[index].messages);\n      console.log(newArr);\n    }\n  }\n\n  function closeModal(obj) {\n    setModal(false);\n    //save chat to basic database\n    dispatch(updateUser(obj));\n  }\n  return (\n    <div className=\"modal\">\n      <div className=\"insideModal\">\n        <div onClick={() => closeModal(updatedUser)}>X</div>\n        <div className=\"messages\">\n          {getMessages.map((x, i) => (\n            <SingleMessage key={i} mess={x} />\n          ))}\n        </div>\n        <div className=\"sending\">\n          <input ref={inMessage} type=\"text\" placeholder=\"message\" />\n          <button on onClick={addMessage}>\n            Send\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default ChatModal;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}